<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\BOOT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\BOOT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Thu Sep 06 01:12:57 2018
<BR><P>
<H3>Maximum Stack Usage =        564 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; USB_CheckReady &rArr; SaveFileToUdisk &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1d8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3a]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">CAN1_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC1_2_IRQHandler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">BusFault_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5f]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[60]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[61]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5e]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[57]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[58]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[59]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5c]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5d]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">HardFault_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1f]">MemManage_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[62]">OTG_FS_IRQHandler</a> from user_udisc.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[50]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4f]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4a]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">SVC_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">SysTick_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[28]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">TIM4_IRQHandler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[55]">TIM6_IRQHandler</a> from user_bsp.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[53]">UART4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4d]">USART3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">USBH_Connected</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[5]">USBH_Disconnected</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[8]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[9]">USBH_MSC_Handle</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[7]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[6]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[3]">USBH_SOF</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[13]">USBH_USR_Configuration_DescAvailable</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[b]">USBH_USR_DeInit</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[12]">USBH_USR_DeviceAddressAssigned</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[c]">USBH_USR_DeviceAttached</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[e]">USBH_USR_DeviceDisconnected</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1a]">USBH_USR_DeviceNotSupported</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[10]">USBH_USR_DeviceSpeedDetected</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[11]">USBH_USR_Device_DescAvailable</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[17]">USBH_USR_EnumerationDone</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[a]">USBH_USR_Init</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[19]">USBH_USR_MSC_Application</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[14]">USBH_USR_Manufacturer_String</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[f]">USBH_USR_OverCurrentDetected</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[15]">USBH_USR_Product_String</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[d]">USBH_USR_ResetDevice</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[16]">USBH_USR_SerialNum_String</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1b]">USBH_USR_UnrecoveredError</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[18]">USBH_USR_UserInput</a> from usbh_msc_usr.o(.text) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[21]">UsageFault_Handler</a> from main_70.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[67]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[66]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[65]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1da]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1db]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dc]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1dd]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1df]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[72]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1f6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1f7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1f8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1f9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[69]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[71]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[73]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; USB_CheckReady &rArr; SaveFileToUdisk &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1d9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[76]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[78]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1ff]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[200]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[201]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[ad]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunProgramme
</UL>

<P><STRONG><a name="[202]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[203]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[a9]"></a>delay_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[ae]"></a>delay_DelayMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[204]"></a>delay_DelayUs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>delay_DelayCpuTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>uart3outfifo_Clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
</UL>

<P><STRONG><a name="[7e]"></a>uart3infifo_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
</UL>

<P><STRONG><a name="[7d]"></a>uart2outfifo_Clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
</UL>

<P><STRONG><a name="[7c]"></a>uart1outfifo_Clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
</UL>

<P><STRONG><a name="[7b]"></a>uart1infifo_Clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
</UL>

<P><STRONG><a name="[7a]"></a>fifo_Init</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_Clear
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1outfifo_Clear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2outfifo_Clear
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3infifo_Clear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3outfifo_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[bc]"></a>fifo_DataIn</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyDown
</UL>

<P><STRONG><a name="[93]"></a>fifo_DataOut</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_DataOut
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealKeyDown
</UL>

<P><STRONG><a name="[206]"></a>fifo_DataOut2</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>fifo_Clear</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>fifo_GetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealKeyDown
</UL>

<P><STRONG><a name="[208]"></a>fifo_GetSpace</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>uart1infifo_GetCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPackageFromUart1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_GetSpace
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_DataIn
</UL>

<P><STRONG><a name="[80]"></a>uart1infifo_DataIn</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart1infifo_DataIn
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>uart1infifo_DataOut</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPackageFromUart1
</UL>

<P><STRONG><a name="[82]"></a>uart1infifo_GetSpace</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_GetCount
</UL>

<P><STRONG><a name="[d6]"></a>uart1outfifo_DataIn</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
</UL>

<P><STRONG><a name="[c6]"></a>uart1outfifo_DataOut</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>uart1outfifo_GetSpace</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
</UL>

<P><STRONG><a name="[84]"></a>uart2infifo_GetCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2infifo_GetSpace
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2infifo_DataIn
</UL>

<P><STRONG><a name="[209]"></a>uart2infifo_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>uart2infifo_DataIn</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2infifo_GetCount
</UL>

<P><STRONG><a name="[20a]"></a>uart2infifo_DataOut</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>uart2infifo_GetSpace</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2infifo_GetCount
</UL>

<P><STRONG><a name="[d9]"></a>uart2outfifo_DataIn</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart2
</UL>

<P><STRONG><a name="[20b]"></a>uart2outfifo_DataOut</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>uart2outfifo_GetSpace</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart2
</UL>

<P><STRONG><a name="[87]"></a>uart3infifo_GetCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3infifo_GetSpace
</UL>

<P><STRONG><a name="[20c]"></a>uart3infifo_DataIn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>uart3infifo_DataOut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>uart3infifo_GetSpace</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3infifo_GetCount
</UL>

<P><STRONG><a name="[dc]"></a>uart3outfifo_DataIn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart3
</UL>

<P><STRONG><a name="[20e]"></a>uart3outfifo_DataOut</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>uart3outfifo_GetSpace</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart3
</UL>

<P><STRONG><a name="[20f]"></a>eeprom_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>eeprom_ReadData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>flash_ReadData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>flash_WriteData</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_WriteData &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>eeprom_SaveData</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[af]"></a>flash_ReadUpdateFlag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_ReadUpdateFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>flash_SaveUpdateFlag</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_SaveUpdateFlag &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>readKey</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyDown
</UL>

<P><STRONG><a name="[94]"></a>DealKeyDownOnNormal</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main_70.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealKeyDown
</UL>

<P><STRONG><a name="[91]"></a>DealKeyDown</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DealKeyDown &rArr; fifo_DataOut
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealKeyDownOnNormal
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_GetCount
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_DataOut
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>DealPackageFromUart1</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DealPackageFromUart1
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_DataOut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>U32ToStr</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = U32ToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>tim_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tim_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[9d]"></a>set4051Chanel</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set4051Chanel
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpioInMain
</UL>

<P><STRONG><a name="[a0]"></a>InitGpioInMain</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitGpioInMain &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set4051Chanel
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[a3]"></a>MainInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MainInit &rArr; USB_Config &rArr; USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpioInMain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>RunProgramme</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RunProgramme
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 1180 bytes, Stack size 40 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = main &rArr; USB_CheckReady &rArr; SaveFileToUdisk &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_string
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_setPenColor
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_setFont
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_setBackColor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clearScreen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckReady
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFileSize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFile
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunProgramme
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U32ToStr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPackageFromUart1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealKeyDown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_SaveUpdateFlag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ReadUpdateFlag
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_DelayMs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>LongBeep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyDown
</UL>

<P><STRONG><a name="[bb]"></a>ScanKeyDown</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongBeep
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_DataIn
</UL>

<P><STRONG><a name="[be]"></a>DispString</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[211]"></a>UpdateDataFromSavedData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>U8ToStrNoSpace</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>U16ToTimeStr</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>U16ToStr04</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>U16ToStr</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8ToStr
</UL>

<P><STRONG><a name="[215]"></a>U8ToHexstr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>U8ToStr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U16ToStr
</UL>

<P><STRONG><a name="[c3]"></a>ToggleJinChaoFaShe</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main_70.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main_70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1outfifo_DataOut
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1infifo_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[216]"></a>DealInMp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>InitCountIr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_70.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main_70.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>motor_Init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = motor_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[a8]"></a>uart_Init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uart_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[c0]"></a>uart_SendDataToUart1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_SendDataToUart1 &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1outfifo_GetSpace
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1outfifo_DataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_drawRectangle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_DrawChart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_num
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_string
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clearScreen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispString
</UL>

<P><STRONG><a name="[d7]"></a>uart_SendDataToUart2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2outfifo_GetSpace
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2outfifo_DataIn
</UL>

<P><STRONG><a name="[da]"></a>uart_SendDataToUart3</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3outfifo_GetSpace
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3outfifo_DataIn
</UL>

<P><STRONG><a name="[e0]"></a>GetBitNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_num
</UL>

<P><STRONG><a name="[218]"></a>disp_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>disp_clearScreen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = disp_clearScreen &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>disp_setFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>disp_setPenColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>disp_setBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>disp_string</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = disp_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>disp_num</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBitNum
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[e1]"></a>disp_DrawChart</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[219]"></a>disp_paraString</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>disp_font8String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>disp_font16String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>disp_font24String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>disp_font32String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>disp_font48String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>disp_drawCross</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>disp_drawRectangle</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[220]"></a>disp_SetLine</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>disp_drawRectangleFrame</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>disp_progressRect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>disp_progress</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>disp_DrawCircle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>disp_DrawFullCircle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>disp_DrawRoundRect</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>disp_DrawPic</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, disp.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>USB_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, user_udisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_Config &rArr; USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_OTGFSCLKConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[e6]"></a>SaveFileToUdisk</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, user_udisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = SaveFileToUdisk &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckReady
</UL>

<P><STRONG><a name="[b6]"></a>USB_CheckReady</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, user_udisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = USB_CheckReady &rArr; SaveFileToUdisk &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToUdisk
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>CreateFileToUdisk</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, user_udisc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[b7]"></a>ReadUdiskFileSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, user_udisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ReadUdiskFileSize &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>ReadUdiskFile</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, user_udisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ReadUdiskFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, user_udisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>USBH_GetDescriptor</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[f2]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[f5]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[f8]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[f9]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[fb]"></a>USBH_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[fc]"></a>USBH_SetCfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[fd]"></a>USBH_SetInterface</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbh_stdreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[fe]"></a>USBH_ClrFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[f1]"></a>USBH_CtlReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>

<P><STRONG><a name="[100]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[102]"></a>USBH_CtlSendData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[103]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[104]"></a>USBH_BulkSendData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[105]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[106]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[107]"></a>USBH_InterruptSendData</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[108]"></a>USBH_IsocReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[109]"></a>USBH_IsocSendData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[10a]"></a>USBH_Open_Channel</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[10c]"></a>USBH_Modify_Channel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[10d]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[110]"></a>USBH_Free_Channel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>

<P><STRONG><a name="[228]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hcs.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBH_Disconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>USBH_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[e5]"></a>USBH_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[114]"></a>USBH_HandleControl</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[11b]"></a>USBH_ErrorHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[ec]"></a>USBH_Process</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckReady
</UL>

<P><STRONG><a name="[11c]"></a>USBH_MSC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[11d]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[11e]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[120]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 866 bytes, Stack size 32 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[125]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[124]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[126]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[127]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[128]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[129]"></a>USBH_MSC_Write10</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[12a]"></a>USBH_MSC_Read10</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[13f]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[14e]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[141]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[12d]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[143]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[142]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[12e]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[12f]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[130]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[132]"></a>USB_OTG_GetMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[131]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>

<P><STRONG><a name="[133]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14f]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[229]"></a>USB_OTG_ReadOtgItr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableHostInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[138]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[136]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[139]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[13c]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[13a]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[13e]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[14a]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[10b]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_Init
</UL>

<P><STRONG><a name="[13d]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 502 bytes, Stack size 60 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[121]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[147]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[140]"></a>USB_OTG_StopHost</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[112]"></a>HCD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[11a]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[118]"></a>HCD_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[eb]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckReady
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
</UL>

<P><STRONG><a name="[116]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[115]"></a>HCD_GetURB_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[11f]"></a>HCD_GetXferCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[22a]"></a>HCD_GetHCState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>HCD_HC_Init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_hcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>

<P><STRONG><a name="[101]"></a>HCD_SubmitRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocSendData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocReceiveData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptSendData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
</UL>

<P><STRONG><a name="[ef]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_BSP_TimerIRQ &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_Init &rArr; USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[113]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[137]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[13b]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[119]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[12c]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[55]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM6_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>USBH_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_msc_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_USR_Configuration_DescAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBH_USR_Product_String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBH_USR_UserInput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbh_msc_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = USBH_USR_MSC_Application &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBH_USR_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[162]"></a>get_fat</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[163]"></a>put_fat</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[15a]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[e7]"></a>f_open</STRONG> (Thumb, 360 bytes, Stack size 96 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileToUdisk
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToUdisk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFileSize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFile
</UL>

<P><STRONG><a name="[ee]"></a>f_read</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFile
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[e9]"></a>f_write</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToUdisk
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
</UL>

<P><STRONG><a name="[187]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[ea]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileToUdisk
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToUdisk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFileSize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFile
</UL>

<P><STRONG><a name="[188]"></a>f_chdrive</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>

<P><STRONG><a name="[189]"></a>f_chdir</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>

<P><STRONG><a name="[18a]"></a>f_getcwd</STRONG> (Thumb, 310 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[e8]"></a>f_lseek</STRONG> (Thumb, 694 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToUdisk
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdiskFile
</UL>

<P><STRONG><a name="[18b]"></a>f_opendir</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[18c]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[18d]"></a>f_readdir</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>

<P><STRONG><a name="[18e]"></a>f_findnext</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[18f]"></a>f_findfirst</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[190]"></a>f_stat</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[191]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[192]"></a>f_truncate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[193]"></a>f_unlink</STRONG> (Thumb, 200 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[194]"></a>f_mkdir</STRONG> (Thumb, 368 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[195]"></a>f_chmod</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[196]"></a>f_rename</STRONG> (Thumb, 274 bytes, Stack size 144 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[197]"></a>f_utime</STRONG> (Thumb, 102 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[198]"></a>f_getlabel</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[199]"></a>f_setlabel</STRONG> (Thumb, 480 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[19a]"></a>f_gets</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[19c]"></a>f_putc</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[19d]"></a>f_puts</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[19e]"></a>f_printf</STRONG> (Thumb, 648 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[182]"></a>disk_initialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diskio_msc&sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[181]"></a>disk_status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, diskio_msc&sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[15e]"></a>disk_read</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, diskio_msc&sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[15c]"></a>disk_write</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, diskio_msc&sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[161]"></a>disk_ioctl</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, diskio_msc&sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[184]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio_msc&sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[177]"></a>ff_convert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cc932.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[16b]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc932.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
</UL>

<P><STRONG><a name="[9b]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[22b]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[22e]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[24d]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>FLASH_Unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_SaveUpdateFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_SaveData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_WriteData
</UL>

<P><STRONG><a name="[252]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>FLASH_UnlockBank2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>FLASH_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>FLASH_LockBank2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>FLASH_GetBank2Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>

<P><STRONG><a name="[1a1]"></a>FLASH_WaitForLastBank2Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastBank2Operation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank2Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank2Pages
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[1a4]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[1a3]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastBank1Operation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_ErasePage</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastBank1Operation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_SaveUpdateFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_SaveData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_WriteData
</UL>

<P><STRONG><a name="[1a5]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>

<P><STRONG><a name="[1a6]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[1a7]"></a>FLASH_EraseAllBank2Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>

<P><STRONG><a name="[1a8]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BootConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[1aa]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[1a9]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[8c]"></a>FLASH_ProgramWord</STRONG> (Thumb, 370 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_SaveUpdateFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_SaveData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_WriteData
</UL>

<P><STRONG><a name="[1ab]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>

<P><STRONG><a name="[1ac]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ad]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ae]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1af]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1b0]"></a>FLASH_BootConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[257]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>FLASH_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>FLASH_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_SaveUpdateFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_SaveData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_WriteData
</UL>

<P><STRONG><a name="[25c]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1b2]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpioInMain
</UL>

<P><STRONG><a name="[25d]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>

<P><STRONG><a name="[25e]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleJinChaoFaShe
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set4051Chanel
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleJinChaoFaShe
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpioInMain
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set4051Chanel
</UL>

<P><STRONG><a name="[261]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpioInMain
</UL>

<P><STRONG><a name="[266]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>RCC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[1b3]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[26a]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>RCC_PREDIV1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>RCC_PREDIV2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>RCC_PLL2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>RCC_PLL2Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>RCC_PLL3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>RCC_PLL3Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[a5]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[277]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>RCC_OTGFSCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[a6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[278]"></a>RCC_I2S2CLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>RCC_I2S3CLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e4]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[a7]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[98]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[27e]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[1b6]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[27f]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[99]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[285]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
</UL>

<P><STRONG><a name="[cf]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
</UL>

<P><STRONG><a name="[1bf]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1bd]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1bb]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b9]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b7]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[1c0]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[287]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[d1]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
</UL>

<P><STRONG><a name="[9a]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[28c]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[1c1]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[1c3]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1c5]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[1c4]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1c6]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[290]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[297]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
</UL>

<P><STRONG><a name="[d0]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_Init
</UL>

<P><STRONG><a name="[29c]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[155]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[1c7]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[d2]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
</UL>

<P><STRONG><a name="[2c2]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
</UL>

<P><STRONG><a name="[c8]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendDataToUart1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2c5]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2cb]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[dd]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_drawRectangle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_DrawChart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_num
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_string
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clearScreen
</UL>

<P><STRONG><a name="[1cc]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[bf]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_drawRectangle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_DrawChart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_num
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_string
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clearScreen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispString
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_string
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d9]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2da]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[1d2]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2dd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1d1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[70]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[75]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2e6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f3]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[f7]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[f6]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[f4]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[fa]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[ff]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[10e]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[117]"></a>USBH_HandleEnum</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[6]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_ClassRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[122]"></a>USBH_MSC_BOTReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[9]"></a>USBH_MSC_Handle</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[135]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[12b]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[152]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[151]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[145]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[146]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 984 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[148]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[149]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14b]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14c]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14d]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[150]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[156]"></a>USB_OTG_BSP_TimeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[157]"></a>BSP_SetTime</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[159]"></a>BSP_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, user_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>

<P><STRONG><a name="[16d]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[160]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[170]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[17b]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[15b]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[15d]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[15f]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[164]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[165]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[186]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[166]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[168]"></a>dir_next</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[169]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[17d]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[185]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[16a]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[172]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[174]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[16c]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[16f]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[16e]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[171]"></a>dir_read</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[173]"></a>dir_register</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[175]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[176]"></a>get_fileinfo</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[179]"></a>get_achar</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[178]"></a>pattern_matching</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[17a]"></a>create_name</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[17c]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[180]"></a>get_ldnumber</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdrive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[17e]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[17f]"></a>find_volume</STRONG> (Thumb, 938 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[183]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[19b]"></a>putc_bfd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
</UL>

<P><STRONG><a name="[1be]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1bc]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ba]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b8]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ca]"></a>SetSysClockTo72</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1c9]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[66]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
